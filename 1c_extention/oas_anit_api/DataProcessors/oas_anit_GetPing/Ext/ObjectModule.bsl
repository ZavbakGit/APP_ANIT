// Обработчик запросов метода GET ресурса /ping
//	сервиса oas_api
// 
// В метод передается структура контекста входящего запроса (см. оас_Контекст), содержащая 
// 	Сервис - Строка - БазовыйURL запроса, равен КорневойURL сервиса
// 	Метод - Строка - HTTPМетод
// 	Ресурс - Строка - ОтносительныйURL запроса
// 	Точка - Строка - Ресурс спецификации (user/{username}, /order/{orderId}/update)
// 	Параметры - Соответствие - полученные по спецификации параметры
// 		<Ключ> - Строка - имя параметра
// 		Значение - Строка, Число - значение параметра
// 	Тело - Строка, ДвоичныеДанные - полученное по спецификации тело запроса
// 	Обработчик - Соответствие - полное имя и вызываемы метод обработчика ресурса по настройкам
// 		Имя - Строка - полное имя обработки
// 		Метод - Строка - имя вызываемого метода
// 
// BSLLS:NestedFunctionInParameters-off - без лишних переменных выполнение быстрее
// BSLLS:EmptyRegion-off - пустые области разрешены

#Область ОписаниеПеременных

#КонецОбласти


#Область ПрограммныйИнтерфейс

// Возвращает ответ по запросу GET ресурса /ping
//	сервиса oas_api
//
// Параметры: 
// 
// Тело запроса:
//	Текст, необязательное
//
// Возвращаемое значение: 
//	HTTPСервисОтвет 
// Схема ответа:
//	{
//		"200": {
//			"description": "Просто 200. Просто OK."
//		}
//	}
//
Функция Ответ(Контекст) Экспорт
	
	Результат	= Неопределено;
	
	#Если Сервер Тогда
		
		Результат	= оас_Сервис.ПротоколОтвет(200);
		Тело		= оас_Контекст.Тело(Контекст);
		// Параметры в спецификации не заявлены
		
		//
		// Тело обработчика
		// 
		
		// При возникновении ошибки сигнализируем об этом
		
		//оас_Контекст.ОшибкаУстановить(Контекст
		//, НСтр("ru = 'Обработка " + Метаданные().ПолноеИмя() + ": не реализован обработчик сервиса " 
		//+ оас_Контекст.Сервис(Контекст) + " метод " + оас_Контекст.Метод(Контекст) 
		//+ " ресурс " + оас_Контекст.Ресурс(Контекст) + "!'"));
		
	#Иначе
		ВызватьИсключение оас_ПодсистемаТексты.СредаВыполненияОшибка();
	#КонецЕсли
	
	Результат	= оас_Сервис.ПротоколОтвет(200);
	
	Структура = Новый Структура();
	Структура.Вставить("date_time",ТекущаяДата());
	Структура.Вставить("current_user",
			oas_anit.ВернутьСтруктуруСсылкиСправочника(Пользователи.ТекущийПользователь()));
	
	CтрокаJSON = oas_anit.СтруктуруВjSON(Структура);
	
	
	Результат.УстановитьТелоИзСтроки(CтрокаJSON,КодировкаТекста.UTF8);
	Возврат Результат;
	
	//Возврат оас_Сервис.Ответ(Строка(ТекущаяДата()));
	
КонецФункции // Ответ 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#КонецОбласти

// BSLLS:EmptyRegion-on
// BSLLS:NestedFunctionInParameters-on