// Обработчик запросов метода GET ресурса /ping
//	сервиса oas_api
// 
// В метод передается структура контекста входящего запроса (см. оас_Контекст), содержащая 
// 	Сервис - Строка - БазовыйURL запроса, равен КорневойURL сервиса
// 	Метод - Строка - HTTPМетод
// 	Ресурс - Строка - ОтносительныйURL запроса
// 	Точка - Строка - Ресурс спецификации (user/{username}, /order/{orderId}/update)
// 	Параметры - Соответствие - полученные по спецификации параметры
// 		<Ключ> - Строка - имя параметра
// 		Значение - Строка, Число - значение параметра
// 	Тело - Строка, ДвоичныеДанные - полученное по спецификации тело запроса
// 	Обработчик - Соответствие - полное имя и вызываемы метод обработчика ресурса по настройкам
// 		Имя - Строка - полное имя обработки
// 		Метод - Строка - имя вызываемого метода
// 
// BSLLS:NestedFunctionInParameters-off - без лишних переменных выполнение быстрее
// BSLLS:EmptyRegion-off - пустые области разрешены

#Область ОписаниеПеременных

#КонецОбласти


#Область ПрограммныйИнтерфейс

// Возвращает ответ по запросу GET ресурса /ping
//	сервиса oas_api
//
// Параметры: 
// 
// Тело запроса:
//	Текст, необязательное
//
// Возвращаемое значение: 
//	HTTPСервисОтвет 
// Схема ответа:
//	{
//		"200": {
//			"description": "Просто 200. Просто OK."
//		}
//	}
//
Функция Ответ(Контекст) Экспорт
	
		
	СтруктураПользователь = oas_anit.ВернутьСтруктуруСсылкиСправочника(Пользователи.ТекущийПользователь());
	Структура = Новый Структура();
	Структура.Вставить("guidUser",СтруктураПользователь.guid);
	Структура.Вставить("nameUser",СтруктураПользователь.name);
	CтрокаJSON = oas_anit.СтруктуруВjSON(Структура);
	
	Результат	= оас_Сервис.ПротоколОтвет(200);
	Результат.УстановитьТелоИзСтроки(CтрокаJSON,КодировкаТекста.UTF8);
	Возврат Результат;
	


КонецФункции // Ответ 

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#КонецОбласти

// BSLLS:EmptyRegion-on
// BSLLS:NestedFunctionInParameters-on